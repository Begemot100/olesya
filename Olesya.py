import logging
import sqlite3
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.exceptions import BadRequest
from dotenv import load_dotenv


load_dotenv()


API_TOKEN = os.getenv("API_TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

conn = sqlite3.connect("subscriptions.db")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    first_name TEXT,
    last_name TEXT,
    subscription_status TEXT,
    first_checked TIMESTAMP
)
""")
conn.commit()

# –ö–Ω–æ–ø–∫–∞ "üöÄ –°—Ç–∞—Ä—Ç"
start_button = InlineKeyboardMarkup().add(
    InlineKeyboardButton("üöÄ –°—Ç–∞—Ä—Ç", callback_data="start_check_subscription")
)

subscribe_and_check_button = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"),
    InlineKeyboardButton("üîÑ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!", callback_data="check_subscription")
)

def save_user_to_db(user_id, username, first_name, last_name, status):
    cursor.execute("""
    INSERT OR REPLACE INTO users (user_id, username, first_name, last_name, subscription_status, first_checked)
    VALUES (?, ?, ?, ?, ?, ?)
    """, (user_id, username, first_name, last_name, status, datetime.now()))
    conn.commit()

@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await message.delete()

    save_user_to_db(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        status="started"
    )

    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ ¬´üöÄ –°—Ç–∞—Ä—Ç¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ üéÅ",
        reply_markup=start_button
    )

@dp.callback_query_handler(text="start_check_subscription")
async def start_check_subscription(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´üîÑ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!¬ª.",
        reply_markup=subscribe_and_check_button
    )

@dp.callback_query_handler(text="check_subscription")
async def check_subscription(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    try:
        chat_member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)

        if chat_member.status in ['member', 'administrator', 'owner']:
            save_user_to_db(
                user_id=user_id,
                username=callback_query.from_user.username,
                first_name=callback_query.from_user.first_name,
                last_name=callback_query.from_user.last_name,
                status="subscribed"
            )

            await callback_query.message.edit_text(
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! üéâ\n\n–í–æ—Ç —Ç–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫:\nhttps://youtu.be/tR_bGpJTkTw?si=W2jexfGgviuYcepk"
            )
        else:
            save_user_to_db(
                user_id=user_id,
                username=callback_query.from_user.username,
                first_name=callback_query.from_user.first_name,
                last_name=callback_query.from_user.last_name,
                status="not_subscribed"
            )

            await callback_query.message.edit_text(
                "–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                reply_markup=subscribe_and_check_button
            )
    except BadRequest:
        await callback_query.message.answer(
            "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∏—Å–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞."
        )

if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
